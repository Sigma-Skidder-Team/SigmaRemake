plugins {
	id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.23'
	id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
	id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
	// Define wrapper values here so as to not have to always do so when updating gradlew.properties.
	// Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
	// documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
	// file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
	// (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
	distributionType = Wrapper.DistributionType.BIN
}

kotlin_version = project.kotlin_version
fabric_kt_version = project.fabric_kt_version
version = project.mod_version

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = "meteor-maven"
		url = "https://maven.meteordev.org/releases"
	}
	maven {
		name = "fabricmc-maven"
		url = "https://maven.fabricmc.net/"
	}
	mavenCentral()
	mavenLocal()
	maven {
		name = "Kotlin for Forge"
		setUrl("https://thedarkcolour.github.io/KotlinForForge/")
	}
}


neoForge {
	// Specify the version of NeoForge to use.
	version = project.neo_version

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_minecraft_version
	}

	// This line is optional. Access Transformers are automatically detected
	// accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			client()

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
		}

		clientData {
			clientData()

			// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
			// gameDirectory = project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		// define mod <-> source bindings
		// these are used to tell the game which sources are for which mod
		// mostly optional in a single mod project
		// but multi mod projects should define one per mod
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	implementation "meteordevelopment:orbit:${project.orbit_version}"
	implementation "org.reflections:reflections:${project.reflections_version}"
	implementation "org.jetbrains.kotlin:kotlin-metadata-jvm:$kotlin_version"
	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.1"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version            : neo_version,
			neo_version_range      : neo_version_range,
			kff_version            : kff_version,
			kff_version_range      : kff_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : mod_version,
			mod_authors            : mod_authors,
			mod_description        : mod_description
	]
	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}
java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

kotlin {
	jvmToolchain(21)
}
// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}